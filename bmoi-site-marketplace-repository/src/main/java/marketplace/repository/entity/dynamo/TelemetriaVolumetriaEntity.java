/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package marketplace.repository.entity.dynamo;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.TextStyle;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import lombok.Data;

/**
 *
 * @author Martin Pilar mpilarcastillejo@gmail.com
 */
@Data
//@DynamoDBTable(tableName = "ddb-telemetria-volumetria-dev")
public class TelemetriaVolumetriaEntity {

//    @DynamoDBHashKey(attributeName = "idrequest")
//    @DynamoDBAutoGeneratedKey
    @JsonProperty("idrequest")
    private String idRequest;
//    @DynamoDBAttribute(attributeName = "device")
    @JsonProperty("device")
    private String device;
//    @DynamoDBAttribute(attributeName = "fecregistro")
    @JsonProperty("fecregistro")
    private String fecRegistro;

    @JsonProperty("fecdevice")
    private String fecDevice;
//    @DynamoDBAttribute(attributeName = "data_calculation")
    @JsonProperty("data_calculation")
    private String dataCalculation;
//    @DynamoDBAttribute(attributeName = "idcliente")
    @JsonProperty("idcliente")
    private String idCliente;
//    @DynamoDBAttribute(attributeName = "payload")
    @JsonProperty("payload")
    private String payload;

    public Long getFechaRegistroDate() {
        Date fechaDate = new Date(fecRegistro);
        return fechaDate.toInstant()
                .atZone(ZoneId.systemDefault())
                .toInstant().toEpochMilli();
    }

    public DataCalculationEntity getDataCalculationEntity() {
        try {
            final ObjectMapper mapper = new ObjectMapper();
            DataCalculationEntity calculoEntity = mapper.readValue(dataCalculation, DataCalculationEntity.class);
            return calculoEntity;
        } catch (JsonProcessingException ex) {
            System.out.println("error " + ex);
            return null;
        }
    }

    public static void main(String[] args) {
        try {
            String json = "{\"idrequest\":null,\"fecdevice\":\"2021/07/09 23:48:38\",\"payload\":\"{\\\"timestamp\\\":1625874518,\\\"device\\\":\\\"3FB7C3\\\",\\\"pulsosA\\\":1,\\\"pulsos\\\":4209,\\\"rsv\\\":0,\\\"bateria\\\":2675,\\\"seqNumber\\\":\\\"2939\\\"}\",\"data_calculation\":\"{\\\"pulsos\\\":\\\"2684357.190625\\\",\\\"pulsos_medida0\\\":\\\"Watios hora (W/H)\\\",\\\"pulsos_valor0\\\":\\\"2630.625\\\",\\\"pulsos_medida1\\\":\\\"Kilowatios hora (KW/H)\\\",\\\"pulsos_valor1\\\":\\\"2.630625\\\",\\\"bateria\\\":\\\"1.3375\\\",\\\"bateria_estado\\\":\\\"M√ÅXIMA\\\",\\\"rsv\\\":\\\"0\\\",\\\"rsv_estado\\\":\\\"Natural\\\",\\\"anio\\\":2021,\\\"mes\\\":7,\\\"dia\\\":9,\\\"seq_number\\\":\\\"2939\\\"}\",\"fecregistro\":\"2021/07/09 23:48:40\",\"idcliente\":\"39\",\"device\":\"3FB7C3\"}";
            ObjectMapper mapper = new ObjectMapper();
            TelemetriaVolumetriaEntity entity = mapper.readValue(json, TelemetriaVolumetriaEntity.class
            );
            Date date = new Date(entity.getFecRegistro());

            System.out.println(
                    "getFecRegistro " + entity.getFecRegistro());
            System.out.println(
                    "data " + date);
            DataCalculationEntity calculationEntity = mapper.readValue(entity.getDataCalculation(), DataCalculationEntity.class);
//            TelemetriaVolumetriaEntity entity = JsonConversor.fromStringToObject(json, TelemetriaVolumetriaEntity.class);

            System.out.println(
                    "date getDate " + getDate(entity.getFecRegistro()).getYear());
            System.out.println(
                    "date getYear " + getDate(entity.getFecRegistro()).getYear());
            System.out.println(
                    "date getMonthValue " + getDate(entity.getFecRegistro()).getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")));
            System.out.println(
                    "date getDate " + getDate(entity.getFecRegistro()).getYear());
            System.out.println(
                    "entity" + entity);
            System.out.println(
                    "calculationEntity" + calculationEntity);
        } catch (Exception ex) {
            Logger.getLogger(TelemetriaVolumetriaEntity.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static LocalDateTime getDate(String fecha) {
        Date fechaDate = new Date(fecha);
        return fechaDate.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDateTime();
    }
}
